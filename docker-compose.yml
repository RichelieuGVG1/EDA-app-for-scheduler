version: '3.8'

services:
  # Redis (should start first)
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - task-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Zookeeper (needed for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    healthcheck:
      test: echo ruok | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - task-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    networks:
      - task-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s


  # Task Service (depends on Kafka and Redis)
  task-service:
    build: ./task-service
    environment:
      - REDIS_HOST=redis
      - KAFKA_BROKER=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - task-network

  # Scheduler Service (depends on Kafka and Redis)
  scheduler-service:
    build: ./scheduler-service
    environment:
      - REDIS_HOST=redis
      - KAFKA_BROKER=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - task-network

  # Notifier Service (Telegram Bot) - depends on Kafka and Redis
  notifier-service:
    build: ./notifier-service
    entrypoint: ["/wait-for-kafka.sh", "kafka:9092", "--", "python", "main.py"]
    ports:
      - "8443:8443"
      #- "8000:8000"
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=6379
      - KAFKA_SERVER=kafka:9092
      - WEBHOOK_HOST=${WEBHOOK_HOST:-localhost}
    volumes:
      - ./notifier-service/logs:/app/logs:rw
      - ./notifier-service:/app
      - ./notifier-service/wait-for-kafka.sh:/wait-for-kafka.sh
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - task-network
    container_name: notifier-service
    

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Конфигурационный файл
      - ./alert_rules.yml:/etc/prometheus/alert_rules.yml  # Файл с алертами
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - task-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - task-network


   # Сервис Alertmanager
  alertmanager:
    image: prom/alertmanager:v0.24.0
    container_name: alertmanager-archapp-lab4
    ports:
      - "9093:9093"   # Alertmanager web UI
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml  # Конфигурационный файл


networks:
  task-network:
    driver: bridge 